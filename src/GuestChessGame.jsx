import React, { useState, useEffect, useRef } from 'react';
import SockJS from 'sockjs-client';
import { Stomp } from '@stomp/stompjs';
import GameStatus from './components/GameStatus'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω
import './GuestChessGame.css'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã

function GuestChessGame({ onBack }) {
    const [connected, setConnected] = useState(false);
    const [joinedGame, setJoinedGame] = useState(false);
    const [gameId, setGameId] = useState(null);
    const [position, setPosition] = useState('start');
    const [error, setError] = useState(null);
    const [gameResult, setGameResult] = useState(null);
    const [playerColor, setPlayerColor] = useState(null);
    const [sideToMove, setSideToMove] = useState('WHITE');
    const [isSearching, setIsSearching] = useState(false);
    const stompClientRef = useRef(null);

    useEffect(() => {
        const socket = new SockJS('http://localhost:8080/ws-game');
        const stompClient = Stomp.over(socket);
        stompClient.connect({}, () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            setConnected(true);
        });
        stompClientRef.current = stompClient;

        return () => {
            stompClient.disconnect(() => {
                console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            });
        };
    }, []);

    useEffect(() => {
        if (!gameId || !playerColor || !joinedGame) {
            console.log('üö´ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ beforeunload –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω:', { gameId, playerColor, joinedGame });
            return;
        }

        console.log('üõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ beforeunload:', { gameId, playerColor });

        const handleBeforeUnload = () => {
            console.log('üì¥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç:', { gameId, playerColor });
            const blob = new Blob([JSON.stringify({ playerColor })], { type: 'application/json' });
            navigator.sendBeacon(`http://localhost:8080/guest/api/game/disconnect/${gameId}`, blob);
        };

        window.addEventListener('beforeunload', handleBeforeUnload);

        return () => {
            console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ beforeunload:', { gameId, playerColor });
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [gameId, playerColor, joinedGame]);

    const subscribeToGameState = (gameId) => {
        if (stompClientRef.current) {
            stompClientRef.current.subscribe(`/topic/game.state/${gameId}`, (msg) => {
                const gameState = JSON.parse(msg.body);
                console.log('üì¨ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', gameState);
                if (gameState.error) {
                    setError(gameState.error);
                    setGameResult(null);
                } else {
                    setPosition(gameState.fen);
                    setSideToMove(gameState.sideToMove);
                    setError(null);
                    if (gameState.gameResult) {
                        setGameResult(gameState.gameResult);
                    }
                }
            });
        }
    };

    const findGame = async () => {
        if (!connected || !stompClientRef.current || isSearching) return;

        setIsSearching(true);
        try {
            const response = await fetch('http://localhost:8080/guest/api/game/start', {
                method: 'POST'
            });
            const data = await response.json();
            console.log('üéÆ –û—Ç–≤–µ—Ç –æ—Ç /api/game/start:', data);

            const { gameId, waiting, fen, playerColor, sideToMove } = data;
            setGameId(gameId);
            setPlayerColor(playerColor);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å—Ä–∞–∑—É
            subscribeToGameState(gameId);

            if (waiting) {
                stompClientRef.current.subscribe(`/queue/game.found/${gameId}`, (message) => {
                    const body = JSON.parse(message.body);
                    console.log('üì¨ –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!', body);
                    setJoinedGame(true);
                    setPosition(body.fen);
                    setPlayerColor(body.playerColor);
                    setSideToMove(body.sideToMove);
                    setIsSearching(false);
                });
            } else {
                setJoinedGame(true);
                setPosition(fen);
                setSideToMove(sideToMove);
                setIsSearching(false);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            setIsSearching(false);
        }
    };

    const resignGame = async () => {
        if (!gameId || !playerColor) return;

        try {
            const response = await fetch(`http://localhost:8080/guest/api/game/resign/${gameId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ playerColor })
            });
            const data = await response.json();
            console.log('üè≥Ô∏è –û—Ç–≤–µ—Ç –æ—Ç /api/game/resign:', data);
            if (data.error) {
                setError(data.error);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–¥–∞—á–µ –∏–≥—Ä—ã:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    };

    const onDrop = ({ sourceSquare, targetSquare }) => {
        if (gameId && stompClientRef.current && !gameResult && playerColor === sideToMove) {
            const move = `${sourceSquare}${targetSquare}`;
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞:', move);
            stompClientRef.current.send(`/app/game/move/${gameId}`, {}, JSON.stringify({
                move,
                playerColor
            }));
        }
    };

    const handleBack = () => {
        if (stompClientRef.current) {
            stompClientRef.current.disconnect(() => {
                console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω'); 
            });
        }
        onBack();
    };

    return (
        <div className="guest-game-container">
            <h2 className="guest-game-title">–®–∞—Ö–º–∞—Ç—ã –¥–ª—è –≥–æ—Å—Ç–µ–π</h2>
            {!joinedGame ? (
                <button
                    onClick={findGame}
                    disabled={!connected || isSearching}
                    className={`guest-game-button ${isSearching || !connected ? 'btn-disabled' : 'btn-active'}`}
                >
                    {isSearching ? (
                        <>
                            <svg
                                className="spinner-icon"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                            >
                                <circle
                                    className="spinner-background"
                                    cx="12"
                                    cy="12"
                                    r="10"
                                    stroke="currentColor"
                                    strokeWidth="4"
                                ></circle>
                                <path
                                    className="spinner-foreground"
                                    fill="currentColor"
                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                ></path>
                            </svg>
                            –ü–æ–∏—Å–∫...
                        </>
                    ) : (
                        '–ù–∞–π—Ç–∏ –∏–≥—Ä—É'
                    )}
                </button>
            ) : (
                <GameStatus
                    gameId={gameId}
                    playerColor={playerColor}
                    sideToMove={sideToMove}
                    error={error}
                    gameResult={gameResult}
                    position={position}
                    onDrop={onDrop}
                    resignGame={resignGame}
                    handleBack={handleBack}
                />
            )}
        </div>
    );
}

export default GuestChessGame;